.container {
    --bs-gutter-x: 30px;
    margin-left: auto;
    margin-right: auto;
    width:100%;
    padding-right: calc(var(--bs-gutter-x) / 2); // stylelint-disable-line function-disallowed-list
    padding-left: calc(var(--bs-gutter-x) / 2); // stylelint-disable-line function-disallowed-list
}

/**
 * Based on Bootstrap
 */ 
.row {
    --ss-gutter-x: 30px;
    --ss-gutter-y: 0;
    display: flex;
    flex-wrap: wrap;
    // margin-top: calc(var(--ss-gutter-y) * -1); // stylelint-disable-line function-disallowed-list
    margin-right: calc(var(--ss-gutter-x) / -2); // stylelint-disable-line function-disallowed-list
    margin-left: calc(var(--ss-gutter-x) / -2); // stylelint-disable-line function-disallowed-list

    & > * {
        // Add box sizing if only the grid is loaded
        // box-sizing: border-box;
        // flex-shrink: 0;
        // width: 100%;
        // max-width: 100%; // Prevent `.col-auto`, `.col` (& responsive variants) from breaking out the grid
        // padding-right: calc(var(--ss-gutter-x) / 2); // stylelint-disable-line function-disallowed-list
        // padding-left: calc(var(--ss-gutter-x) / 2); // stylelint-disable-line function-disallowed-list
        // margin-top: var(--ss-gutter-y);
    }
}

/**
 * Create css classes based on breakpoints and their corresponding widths (@see variables.scss) and column count
 */
@mixin grid-containers($breakpoints, $widths, $cols) {
    @for $i from 1 through $cols {
        .row > .col-#{$i} {
            flex-basis: 0;
            flex-grow: 1;
            max-width: 100%;
        }
    }

    @each $label, $width in $widths {
        @media screen and (min-width: #{map-get($breakpoints, $label)}) {
            .container {
                width: $width;
            }
            
            @if $label != "xs" {
                .container > .row{
                    width: $width;
                }
            }

            .hide-#{$label} {
                display: none;
            }

            .show-#{$label} {
                display: block;
            }

            @include grid-columns($cols, $label);
        }
    }
}

/**
 * Create css classes for grid columns
 */
@mixin grid-columns($cols, $size-label) {
    @for $i from 1 through $cols {
        .row > .col-#{$size-label}-#{$i} {
            //grid-column: auto / span #{$i};
            flex: 0 0 percentage($i / $cols);
            max-width: percentage($i / $cols);
            position: relative;
            width: 100%;
            padding-right: calc(30px / 2);
            padding-left: calc(30px / 2);
        }

        @if $i != 12 {
            .row > .offset-#{$size-label}-#{$i} {
                $num: $i / $cols;
                margin-left: if($num == 0, 0, percentage($num));
            }
        }
    }
}

/**
 * Attach a clearfix to a css rule
 */
@mixin clearfix() {
    &::after {
      display: block;
      content: "";
      clear: both;
    }
}

@mixin input-box() {
    padding: .6rem 1rem;
    border-color: $color-grey-med;
    border-radius: 3px;
    border-style: solid;
    border-width: 1px;
}

.d-flex {
    display: flex;
    
    &.d-flex-justify-content-end {
        justify-content: flex-end;
    }

    &.d-flex-justify-content-start {
        justify-content: flex-start;
    }

    &.d-flex-justify-space-between {
        justify-content: space-between;
    }

    &.d-flex-align-content-center {
        align-content: center;
    }

    &.d-flex-align-items-center {
        align-items: center;
    }
}


img,
iframe,
video,
object { 
    max-width: 100%;  
}